import java.io.File; // Import the File class
import java.io.FileNotFoundException; // Import this class to handle errors
import java.util.Scanner; // Import the Scanner class to read text files
import java.util.HashMap;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class Stack {

    public Double[] stack;
    public int stackPosition;

    public Stack() {
        this.stackPosition = -1;
        this.stack = new Double[1000];
    }

    public boolean emptyStack() {
        if (this.stackPosition == -1) {
            return true;
        }
        return false;
    }

    public int len() {
        if (this.emptyStack()) {
            return 0;
        }
        return this.stackPosition + 1;
    }

    public Double top() {
        if (this.emptyStack()) {
            return null;
        }
        return this.stack[this.stackPosition];
    }

    public Double pop() {
        if (emptyStack()) {
            return null;
        }
        return this.stack[this.stackPosition--];
    }

    public void push(Double valor) {
        if (this.stackPosition < this.stack.length - 1) {
            this.stack[++stackPosition] = valor;
        }
    }

    public static boolean isNum(String token) {
        if (token == null) {
            return false;
        }
        try {
            double d = Double.parseDouble(token);
        } catch (NumberFormatException nfe) {
            return false;
        }
        return true;
    }
    public static boolean isID(String token) {
    if (token.matches("[a-zA-Z]*")) {
        return true;
    }
    return false;
    }
    public static boolean isOP(String token) {
        Pattern pattern = Pattern.compile("[[\\^][\\-][\\*][\\+][/]]", Pattern.CASE_INSENSITIVE);
        Matcher matcher = pattern.matcher(token);
        boolean matchFound = matcher.find();
          if (matchFound) {
              return true;
          }
          return false;
    }

    public static Double processToken(String token, Double op1, Double op2) {
        Double result = 0.0;
        if (token.contains("+")) {
            result = op1 + op2;
            System.out.printf("Token [type=PLUS, lexeme=+]\n");
            return result;
        } else if (token.contains("-")) {
            result = op1 - op2;
            System.out.printf("Token [type=MINUS, lexeme=-]\n");
            return result;
        } else if (token.contains("/")) {
            result = op1 / op2;
            System.out.printf("Token [type=SLASH, lexeme=/]\n");
            return result;
        } else if (token.contains("*")) {
            result = op1 * op2;
            System.out.printf("Token [type=STAR, lexeme=*]\n");
            return result;
        } else if (token.contains("^")) {
            result = Math.pow(op2, op1);
            System.out.printf("Token [type=POT, lexeme=^]\n");
            return result;
        }
        return 0.0;
    }

    public static void main(String args[]) {
        String data = "";
        double result = 0.0;
        Stack p = new Stack();
        HashMap<String, String> ids = new HashMap<String, String>();
        try {
            File myObj = new File("/Calc1.stk");
            Scanner myReader = new Scanner(myObj);
            while (myReader.hasNextLine()) {
                String d = myReader.nextLine();
                if (isOP(d)) {
                    double op1 = p.pop();
                    double op2 = p.pop();
                    p.push(processToken(d, op1, op2));
                    
                } else if (isNum(d)) {
                    double f = Double.parseDouble(d);
                    System.out.printf("Token [type=NUM, lexeme=%f]\n", f);
                    p.push(f);
                } else if (ids.get(d) != null) {
                    Double idNUM = Double.parseDouble(ids.get(d));
                    p.push(idNUM);
                } else if (isID(d)) {
                    String id = d ;
                    d = myReader.nextLine();
                    if(d.contains("=") ){
                        d = myReader.nextLine();
                        if(isNum(d)){
                            ids.put(id, d);
                            System.out.printf("Token [type=ID, lexeme=%s]\n", id);
                        }else {
                            System.out.printf("Unexpected character:%s", d);
                            return;
                        }
                    }else if (isOP(d)) {
                        double op1 = p.pop();
                        double op2 = p.pop();
                        p.push(processToken(d, op1, op2));
                        
                    }else if (isNum(d)) {
                        double f = Double.parseDouble(d);
                        System.out.printf("Token [type=NUM, lexeme=%f]\n", f);
                        p.push(f);
                    }else if (ids.get(d) != null) {
                        Double idNUM = Double.parseDouble(ids.get(d));
                        double op1 = p.pop();
                        p.push(processToken(d, op1, idNUM));
                        return;
                    }else {
                        System.out.printf("Unexpected character:%s", d);
                        return;
                    }
                    
                } else {
                    System.out.printf("Unexpected character:%s", d);
                    return;
                }
            }

            if (p.len() > 1) {
                System.out.println("invalid expression");
            } else {
                double f = p.pop();
                System.out.println(f);
            }
            myReader.close();
        } catch (FileNotFoundException e) {
            System.out.println("An error occurred.");
            e.printStackTrace();
        }
    }
}